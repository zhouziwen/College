package com.zhiyou.colleageapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.hyphenate.chat.EMMessage;
import com.zhiyou.colleageapp.domain.Message;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, String> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MsgId = new Property(0, String.class, "MsgId", true, "MSG_ID");
        public final static Property ConversationId = new Property(1, String.class, "ConversationId", false, "CONVERSATION_ID");
        public final static Property SpeakerId = new Property(2, String.class, "SpeakerId", false, "SPEAKER_ID");
        public final static Property SessionType = new Property(3, Integer.class, "SessionType", false, "SESSION_TYPE");
        public final static Property TimeStamp = new Property(4, Long.class, "TimeStamp", false, "TIME_STAMP");
        public final static Property Type = new Property(5, String.class, "Type", false, "TYPE");
        public final static Property Content = new Property(6, String.class, "Content", false, "CONTENT");
        public final static Property Status = new Property(7, String.class, "Status", false, "STATUS");
        public final static Property IsAcked = new Property(8, Integer.class, "isAcked", false, "IS_ACKED");
        public final static Property DeviceType = new Property(9, Integer.class, "DeviceType", false, "DEVICE_TYPE");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }

    @Override
    protected Message readEntity(Cursor cursor, int offset) {
        return null;
    }

    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"MSG_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: MsgId
                "\"CONVERSATION_ID\" TEXT," + // 1: ConversationId
                "\"SPEAKER_ID\" TEXT," + // 2: SpeakerId
                "\"SESSION_TYPE\" INTEGER," + // 3: SessionType
                "\"TIME_STAMP\" INTEGER," + // 4: TimeStamp
                "\"TYPE\" TEXT," + // 5: Type
                "\"CONTENT\" TEXT," + // 6: Content
                "\"STATUS\" TEXT," + // 7: Status
                "\"IS_ACKED\" INTEGER," + // 8: isAcked
                "\"DEVICE_TYPE\" INTEGER);"); // 9: DeviceType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String MsgId = entity.getMsgId();
        if (MsgId != null) {
            stmt.bindString(1, MsgId);
        }
 
        String ConversationId = entity.getConversationId();
        if (ConversationId != null) {
            stmt.bindString(2, ConversationId);
        }
 
        String SpeakerId = entity.getSpeakerId();
        if (SpeakerId != null) {
            stmt.bindString(3, SpeakerId);
        }
 
        Integer SessionType = entity.getSessionType();
        if (SessionType != null) {
            stmt.bindLong(4, SessionType);
        }
 
        Long TimeStamp = entity.getMsgTime();
        if (TimeStamp != null) {
            stmt.bindLong(5, TimeStamp);
        }
 
        String Type = entity.getType().toString();
        if (Type != null) {
            stmt.bindString(6, Type);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(7, Content);
        }
 
        String Status = entity.getStatus().toString();
        if (Status != null) {
            stmt.bindString(8, Status);
        }
 
        Integer isAcked = entity.isAcked() ? 1: 0;
        stmt.bindLong(9, isAcked);

        Integer DeviceType = entity.getDeviceType();
        if (DeviceType != null) {
            stmt.bindLong(10, DeviceType);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset ) ? null : cursor.getString(offset );
    }    

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setMsgId(cursor.isNull(offset ) ? null : cursor.getString(offset ));
        entity.setConversationId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpeakerId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSessionType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMsgTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : EMMessage.Status.valueOf(cursor.getString(offset + 7)));
        entity.setAcked(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) == 1);
        entity.setDeviceType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Message entity, long rowId) {
        return entity.getMsgId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Message entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
