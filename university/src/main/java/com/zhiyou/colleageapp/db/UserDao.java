package com.zhiyou.colleageapp.db;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.zhiyou.colleageapp.domain.User;
import com.zhiyou.colleageapp.eenum.Gender;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {
    public static final String TABLENAME = "USER";//不可修改
    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Username = new Property(0, String.class, "mUserName", false, "USERNAME");
        public final static Property Nick = new Property(1, String.class, "mNick", false, "NICK");
        public final static Property Avatar = new Property(2, String.class, "mAvatar", false, "AVATAR");
        public final static Property Gender = new Property(3, Integer.class, "mGender", false, "GENDER");
        public final static Property Belong = new Property(4, String.class, "mBelong", false, "BELONG");
    };
    public UserDao(DaoConfig config) {
        super(config);
    }
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }
    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USERNAME\" TEXT PRIMARY KEY," + // 0: Username
                "\"NICK\" TEXT," + // 1: Nick
                "\"AVATAR\" TEXT," + // 2: Avatar
                "\"GENDER\" INTEGER," + //3: Gender
                "\"BELONG\" TEXT);"); // 4: mBelong
    }
    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }
    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        String Username = entity.getUsername();
        if (Username != null) {
            stmt.bindString(1, Username);
        }
        String Nick = entity.getNick();
        if (Nick != null) {
            stmt.bindString(2, Nick);
        }
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(3, Avatar);
        }
        Gender gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(4, gender.ordinal());
        } else {
            stmt.bindLong(4, Gender.Male.getValue());
        }
        String belong = entity.getBelong();
        if (belong != null) {
            stmt.bindString(5,belong);
        }
    }
    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset) ? null : cursor.getString(offset);
    }
    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User();
        readEntity(cursor,entity,offset);
        return entity;
    }
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserName(cursor.isNull(offset) ? null : cursor.getString(offset));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        Integer intGender = cursor.getInt(offset + 3);
        entity.setGender(cursor.isNull(offset + 3) ? null : Gender.valueFromInt(intGender));
        entity.setBelong(cursor.isNull(offset + 4) ? null : cursor.getString(offset +4));
     }
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUsername();
    }
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUsername();
        } else {
            return null;
        }
    }
    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
}
