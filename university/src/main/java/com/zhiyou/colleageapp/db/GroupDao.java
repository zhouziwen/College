package com.zhiyou.colleageapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.zhiyou.colleageapp.domain.FriendGroup;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GROUP".
 */
public class GroupDao extends AbstractDao<FriendGroup, String> {

    public static final String TABLENAME = "GROUP";

    /**
     * Properties of entity FriendGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupId = new Property(0, String.class, "mId", true, "ID");
        public final static Property Name = new Property(1, String.class, "mName", false, "NAME");
        public final static Property Avatar = new Property(2, String.class, "mAvatar", false, "AVATAR");
        public final static Property IsShield = new Property(3, Long.class, "mIsShield", false, "IS_SHIELD");
        public final static Property AllowInvite = new Property(4, Long.class, "mIsAllowInvites", false, "ALLOW_INVITE");
        public final static Property Owner = new Property(5, String.class, "mOwner", false, "OWNER");
    }

    public GroupDao(DaoConfig config) {
        super(config);
    }

    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"IS_SHIELD\" INTEGER," + // 3: isShield
                "\"ALLOW_INVITE\" INTEGER," + // 4: isShield
                "\"OWNER\" TEXT);"); // 5: owner
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, FriendGroup entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }

        boolean isShield = entity.isShield();
        stmt.bindLong(4, isShield ? 1 : 0);

        boolean isAllowInvite = entity.isAllowInvites();
        stmt.bindLong(5,isAllowInvite ? 1 : 0);

        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(6, owner);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset ) ? null : cursor.getString(offset );
    }

    /**
     * @inheritdoc
     */
    @Override
    public FriendGroup readEntity(Cursor cursor, int offset) {
        FriendGroup entity = new FriendGroup();
        readEntity(cursor,entity,offset);
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, FriendGroup entity, int offset) {
        entity.setId(cursor.isNull(offset) ? null : cursor.getString(offset));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShield(!cursor.isNull(offset + 3) && cursor.getInt(offset + 3) == 1);
        entity.setAllowInvites(!cursor.isNull(offset + 4) && cursor.getLong(offset + 4) == 1);
        entity.setOwner(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(FriendGroup group, long rowId) {
        return group.getId();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(FriendGroup entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
